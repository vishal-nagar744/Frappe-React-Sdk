"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrappeCall = void 0;
var FrappeCall = /** @class */ (function () {
    function FrappeCall(appURL, axios, useToken, token, tokenType) {
        this.appURL = appURL;
        this.axios = axios;
        this.useToken = useToken !== null && useToken !== void 0 ? useToken : false;
        this.token = token;
        this.tokenType = tokenType;
    }
    /** Makes a GET request to the specified endpoint */
    FrappeCall.prototype.get = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            var encodedParams;
            return __generator(this, function (_a) {
                encodedParams = new URLSearchParams();
                // TEMP Fix Issue #50
                if (params) {
                    Object.entries(params).forEach(function (param) {
                        var key = param[0], value = param[1];
                        if (value !== null && value !== undefined) {
                            var val = typeof value === 'object' ? JSON.stringify(value) : value;
                            encodedParams.set(key, val);
                        }
                    });
                }
                return [2 /*return*/, this.axios
                        .get("/api/method/".concat(path), {
                        params: encodedParams,
                    })
                        .then(function (res) { return res.data; })
                        .catch(function (error) {
                        var _a, _b;
                        throw __assign(__assign({}, error.response.data), { httpStatus: error.response.status, httpStatusText: error.response.statusText, message: (_a = error.response.data.message) !== null && _a !== void 0 ? _a : 'There was an error.', exception: (_b = error.response.data.exception) !== null && _b !== void 0 ? _b : '' });
                    })];
            });
        });
    };
    /** Makes a POST request to the specified endpoint */
    FrappeCall.prototype.post = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.axios
                        .post("/api/method/".concat(path), __assign({}, params))
                        .then(function (res) { return res.data; })
                        .catch(function (error) {
                        var _a, _b;
                        throw __assign(__assign({}, error.response.data), { httpStatus: error.response.status, httpStatusText: error.response.statusText, message: (_a = error.response.data.message) !== null && _a !== void 0 ? _a : 'There was an error.', exception: (_b = error.response.data.exception) !== null && _b !== void 0 ? _b : '' });
                    })];
            });
        });
    };
    /** Makes a PUT request to the specified endpoint */
    FrappeCall.prototype.put = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.axios
                        .put("/api/method/".concat(path), __assign({}, params))
                        .then(function (res) { return res.data; })
                        .catch(function (error) {
                        var _a, _b;
                        throw __assign(__assign({}, error.response.data), { httpStatus: error.response.status, httpStatusText: error.response.statusText, message: (_a = error.response.data.message) !== null && _a !== void 0 ? _a : 'There was an error.', exception: (_b = error.response.data.exception) !== null && _b !== void 0 ? _b : '' });
                    })];
            });
        });
    };
    /** Makes a DELETE request to the specified endpoint */
    FrappeCall.prototype.delete = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.axios
                        .delete("/api/method/".concat(path), { params: params })
                        .then(function (res) { return res.data; })
                        .catch(function (error) {
                        var _a, _b;
                        throw __assign(__assign({}, error.response.data), { httpStatus: error.response.status, httpStatusText: error.response.statusText, message: (_a = error.response.data.message) !== null && _a !== void 0 ? _a : 'There was an error.', exception: (_b = error.response.data.exception) !== null && _b !== void 0 ? _b : '' });
                    })];
            });
        });
    };
    return FrappeCall;
}());
exports.FrappeCall = FrappeCall;
